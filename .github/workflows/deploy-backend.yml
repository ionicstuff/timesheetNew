name: Deploy backend to ECS

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - "backend/**"
      - "infra/**"
      - ".github/workflows/deploy-backend.yml"

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: timesheet-backend
  ECS_CLUSTER: timesheet-cluster
  ECS_SERVICE: timesheet-service
  CONTAINER_NAME: backend

jobs:
  deploy:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::170779027636:role/github-oidc-ecs-deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image
        id: build-image
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          ECR_URI=$(aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" --query 'repositories[0].repositoryUri' --output text)
          docker build -f backend/Dockerfile -t "$ECR_URI:$IMAGE_TAG" backend
          docker push "$ECR_URI:$IMAGE_TAG"
          echo "ECR_URI=$ECR_URI" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Render task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: infra/ecs-task-def-backend.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.ECR_URI }}:${{ steps.build-image.outputs.IMAGE_TAG }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
